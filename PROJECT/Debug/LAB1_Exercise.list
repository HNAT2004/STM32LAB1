
LAB1_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001bf4  08001bf4  00011bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c18  08001c18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c18  08001c18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c18  08001c18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c18  08001c18  00011c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c1c  08001c1c  00011c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001c2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001c2c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030ce  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ea6  00000000  00000000  00023103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00023fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000358  00000000  00000000  00024390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015674  00000000  00000000  000246e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000471b  00000000  00000000  00039d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079d79  00000000  00000000  0003e477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b81f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d80  00000000  00000000  000b8244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bdc 	.word	0x08001bdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001bdc 	.word	0x08001bdc

0800014c <display7SEG_1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void display7SEG_1(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 81c8 	bhi.w	80004ec <display7SEG_1+0x3a0>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG_1+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001e3 	.word	0x080001e3
 800016c:	08000239 	.word	0x08000239
 8000170:	0800028f 	.word	0x0800028f
 8000174:	080002e5 	.word	0x080002e5
 8000178:	0800033b 	.word	0x0800033b
 800017c:	08000391 	.word	0x08000391
 8000180:	080003e7 	.word	0x080003e7
 8000184:	0800043d 	.word	0x0800043d
 8000188:	08000493 	.word	0x08000493
      switch (num) {
          case 0:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000192:	48d5      	ldr	r0, [pc, #852]	; (80004e8 <display7SEG_1+0x39c>)
 8000194:	f001 f902 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	48d2      	ldr	r0, [pc, #840]	; (80004e8 <display7SEG_1+0x39c>)
 80001a0:	f001 f8fc 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001aa:	48cf      	ldr	r0, [pc, #828]	; (80004e8 <display7SEG_1+0x39c>)
 80001ac:	f001 f8f6 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b6:	48cc      	ldr	r0, [pc, #816]	; (80004e8 <display7SEG_1+0x39c>)
 80001b8:	f001 f8f0 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c2:	48c9      	ldr	r0, [pc, #804]	; (80004e8 <display7SEG_1+0x39c>)
 80001c4:	f001 f8ea 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	48c6      	ldr	r0, [pc, #792]	; (80004e8 <display7SEG_1+0x39c>)
 80001d0:	f001 f8e4 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001da:	48c3      	ldr	r0, [pc, #780]	; (80004e8 <display7SEG_1+0x39c>)
 80001dc:	f001 f8de 	bl	800139c <HAL_GPIO_WritePin>
              break;
 80001e0:	e185      	b.n	80004ee <display7SEG_1+0x3a2>
          case 1:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e8:	48bf      	ldr	r0, [pc, #764]	; (80004e8 <display7SEG_1+0x39c>)
 80001ea:	f001 f8d7 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f4:	48bc      	ldr	r0, [pc, #752]	; (80004e8 <display7SEG_1+0x39c>)
 80001f6:	f001 f8d1 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000200:	48b9      	ldr	r0, [pc, #740]	; (80004e8 <display7SEG_1+0x39c>)
 8000202:	f001 f8cb 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800020c:	48b6      	ldr	r0, [pc, #728]	; (80004e8 <display7SEG_1+0x39c>)
 800020e:	f001 f8c5 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000218:	48b3      	ldr	r0, [pc, #716]	; (80004e8 <display7SEG_1+0x39c>)
 800021a:	f001 f8bf 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	48b0      	ldr	r0, [pc, #704]	; (80004e8 <display7SEG_1+0x39c>)
 8000226:	f001 f8b9 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000230:	48ad      	ldr	r0, [pc, #692]	; (80004e8 <display7SEG_1+0x39c>)
 8000232:	f001 f8b3 	bl	800139c <HAL_GPIO_WritePin>
              break;
 8000236:	e15a      	b.n	80004ee <display7SEG_1+0x3a2>
          case 2:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023e:	48aa      	ldr	r0, [pc, #680]	; (80004e8 <display7SEG_1+0x39c>)
 8000240:	f001 f8ac 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024a:	48a7      	ldr	r0, [pc, #668]	; (80004e8 <display7SEG_1+0x39c>)
 800024c:	f001 f8a6 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000256:	48a4      	ldr	r0, [pc, #656]	; (80004e8 <display7SEG_1+0x39c>)
 8000258:	f001 f8a0 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000262:	48a1      	ldr	r0, [pc, #644]	; (80004e8 <display7SEG_1+0x39c>)
 8000264:	f001 f89a 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800026e:	489e      	ldr	r0, [pc, #632]	; (80004e8 <display7SEG_1+0x39c>)
 8000270:	f001 f894 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	489b      	ldr	r0, [pc, #620]	; (80004e8 <display7SEG_1+0x39c>)
 800027c:	f001 f88e 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000286:	4898      	ldr	r0, [pc, #608]	; (80004e8 <display7SEG_1+0x39c>)
 8000288:	f001 f888 	bl	800139c <HAL_GPIO_WritePin>
              break;
 800028c:	e12f      	b.n	80004ee <display7SEG_1+0x3a2>
          case 3:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000294:	4894      	ldr	r0, [pc, #592]	; (80004e8 <display7SEG_1+0x39c>)
 8000296:	f001 f881 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a0:	4891      	ldr	r0, [pc, #580]	; (80004e8 <display7SEG_1+0x39c>)
 80002a2:	f001 f87b 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ac:	488e      	ldr	r0, [pc, #568]	; (80004e8 <display7SEG_1+0x39c>)
 80002ae:	f001 f875 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002b8:	488b      	ldr	r0, [pc, #556]	; (80004e8 <display7SEG_1+0x39c>)
 80002ba:	f001 f86f 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c4:	4888      	ldr	r0, [pc, #544]	; (80004e8 <display7SEG_1+0x39c>)
 80002c6:	f001 f869 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d0:	4885      	ldr	r0, [pc, #532]	; (80004e8 <display7SEG_1+0x39c>)
 80002d2:	f001 f863 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002dc:	4882      	ldr	r0, [pc, #520]	; (80004e8 <display7SEG_1+0x39c>)
 80002de:	f001 f85d 	bl	800139c <HAL_GPIO_WritePin>
              break;
 80002e2:	e104      	b.n	80004ee <display7SEG_1+0x3a2>
          case 4:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	487f      	ldr	r0, [pc, #508]	; (80004e8 <display7SEG_1+0x39c>)
 80002ec:	f001 f856 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	487c      	ldr	r0, [pc, #496]	; (80004e8 <display7SEG_1+0x39c>)
 80002f8:	f001 f850 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000302:	4879      	ldr	r0, [pc, #484]	; (80004e8 <display7SEG_1+0x39c>)
 8000304:	f001 f84a 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030e:	4876      	ldr	r0, [pc, #472]	; (80004e8 <display7SEG_1+0x39c>)
 8000310:	f001 f844 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031a:	4873      	ldr	r0, [pc, #460]	; (80004e8 <display7SEG_1+0x39c>)
 800031c:	f001 f83e 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	4870      	ldr	r0, [pc, #448]	; (80004e8 <display7SEG_1+0x39c>)
 8000328:	f001 f838 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000332:	486d      	ldr	r0, [pc, #436]	; (80004e8 <display7SEG_1+0x39c>)
 8000334:	f001 f832 	bl	800139c <HAL_GPIO_WritePin>
              break;
 8000338:	e0d9      	b.n	80004ee <display7SEG_1+0x3a2>
          case 5:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4869      	ldr	r0, [pc, #420]	; (80004e8 <display7SEG_1+0x39c>)
 8000342:	f001 f82b 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	4866      	ldr	r0, [pc, #408]	; (80004e8 <display7SEG_1+0x39c>)
 800034e:	f001 f825 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	4863      	ldr	r0, [pc, #396]	; (80004e8 <display7SEG_1+0x39c>)
 800035a:	f001 f81f 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	4860      	ldr	r0, [pc, #384]	; (80004e8 <display7SEG_1+0x39c>)
 8000366:	f001 f819 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000370:	485d      	ldr	r0, [pc, #372]	; (80004e8 <display7SEG_1+0x39c>)
 8000372:	f001 f813 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037c:	485a      	ldr	r0, [pc, #360]	; (80004e8 <display7SEG_1+0x39c>)
 800037e:	f001 f80d 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000388:	4857      	ldr	r0, [pc, #348]	; (80004e8 <display7SEG_1+0x39c>)
 800038a:	f001 f807 	bl	800139c <HAL_GPIO_WritePin>
              break;
 800038e:	e0ae      	b.n	80004ee <display7SEG_1+0x3a2>
          case 6:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000396:	4854      	ldr	r0, [pc, #336]	; (80004e8 <display7SEG_1+0x39c>)
 8000398:	f001 f800 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a2:	4851      	ldr	r0, [pc, #324]	; (80004e8 <display7SEG_1+0x39c>)
 80003a4:	f000 fffa 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ae:	484e      	ldr	r0, [pc, #312]	; (80004e8 <display7SEG_1+0x39c>)
 80003b0:	f000 fff4 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ba:	484b      	ldr	r0, [pc, #300]	; (80004e8 <display7SEG_1+0x39c>)
 80003bc:	f000 ffee 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c6:	4848      	ldr	r0, [pc, #288]	; (80004e8 <display7SEG_1+0x39c>)
 80003c8:	f000 ffe8 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4845      	ldr	r0, [pc, #276]	; (80004e8 <display7SEG_1+0x39c>)
 80003d4:	f000 ffe2 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003de:	4842      	ldr	r0, [pc, #264]	; (80004e8 <display7SEG_1+0x39c>)
 80003e0:	f000 ffdc 	bl	800139c <HAL_GPIO_WritePin>
              break;
 80003e4:	e083      	b.n	80004ee <display7SEG_1+0x3a2>
          case 7:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ec:	483e      	ldr	r0, [pc, #248]	; (80004e8 <display7SEG_1+0x39c>)
 80003ee:	f000 ffd5 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f8:	483b      	ldr	r0, [pc, #236]	; (80004e8 <display7SEG_1+0x39c>)
 80003fa:	f000 ffcf 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4838      	ldr	r0, [pc, #224]	; (80004e8 <display7SEG_1+0x39c>)
 8000406:	f000 ffc9 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000410:	4835      	ldr	r0, [pc, #212]	; (80004e8 <display7SEG_1+0x39c>)
 8000412:	f000 ffc3 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041c:	4832      	ldr	r0, [pc, #200]	; (80004e8 <display7SEG_1+0x39c>)
 800041e:	f000 ffbd 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000428:	482f      	ldr	r0, [pc, #188]	; (80004e8 <display7SEG_1+0x39c>)
 800042a:	f000 ffb7 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000434:	482c      	ldr	r0, [pc, #176]	; (80004e8 <display7SEG_1+0x39c>)
 8000436:	f000 ffb1 	bl	800139c <HAL_GPIO_WritePin>
              break;
 800043a:	e058      	b.n	80004ee <display7SEG_1+0x3a2>
          case 8:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000442:	4829      	ldr	r0, [pc, #164]	; (80004e8 <display7SEG_1+0x39c>)
 8000444:	f000 ffaa 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044e:	4826      	ldr	r0, [pc, #152]	; (80004e8 <display7SEG_1+0x39c>)
 8000450:	f000 ffa4 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045a:	4823      	ldr	r0, [pc, #140]	; (80004e8 <display7SEG_1+0x39c>)
 800045c:	f000 ff9e 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000466:	4820      	ldr	r0, [pc, #128]	; (80004e8 <display7SEG_1+0x39c>)
 8000468:	f000 ff98 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000472:	481d      	ldr	r0, [pc, #116]	; (80004e8 <display7SEG_1+0x39c>)
 8000474:	f000 ff92 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	481a      	ldr	r0, [pc, #104]	; (80004e8 <display7SEG_1+0x39c>)
 8000480:	f000 ff8c 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800048a:	4817      	ldr	r0, [pc, #92]	; (80004e8 <display7SEG_1+0x39c>)
 800048c:	f000 ff86 	bl	800139c <HAL_GPIO_WritePin>
              break;
 8000490:	e02d      	b.n	80004ee <display7SEG_1+0x3a2>
          case 9:
              HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <display7SEG_1+0x39c>)
 800049a:	f000 ff7f 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a4:	4810      	ldr	r0, [pc, #64]	; (80004e8 <display7SEG_1+0x39c>)
 80004a6:	f000 ff79 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <display7SEG_1+0x39c>)
 80004b2:	f000 ff73 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	480a      	ldr	r0, [pc, #40]	; (80004e8 <display7SEG_1+0x39c>)
 80004be:	f000 ff6d 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c8:	4807      	ldr	r0, [pc, #28]	; (80004e8 <display7SEG_1+0x39c>)
 80004ca:	f000 ff67 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <display7SEG_1+0x39c>)
 80004d6:	f000 ff61 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e0:	4801      	ldr	r0, [pc, #4]	; (80004e8 <display7SEG_1+0x39c>)
 80004e2:	f000 ff5b 	bl	800139c <HAL_GPIO_WritePin>
              break;
 80004e6:	e002      	b.n	80004ee <display7SEG_1+0x3a2>
 80004e8:	40010800 	.word	0x40010800
          default:
              break;
 80004ec:	bf00      	nop
      }
  }
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop

080004f8 <display7SEG_2>:

void display7SEG_2(int num){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b09      	cmp	r3, #9
 8000504:	f200 819e 	bhi.w	8000844 <display7SEG_2+0x34c>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <display7SEG_2+0x18>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000539 	.word	0x08000539
 8000514:	08000587 	.word	0x08000587
 8000518:	080005d5 	.word	0x080005d5
 800051c:	08000623 	.word	0x08000623
 8000520:	08000671 	.word	0x08000671
 8000524:	080006bf 	.word	0x080006bf
 8000528:	0800070d 	.word	0x0800070d
 800052c:	0800075b 	.word	0x0800075b
 8000530:	080007a9 	.word	0x080007a9
 8000534:	080007f7 	.word	0x080007f7
      switch (num){
          case 0:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2102      	movs	r1, #2
 800053c:	48c4      	ldr	r0, [pc, #784]	; (8000850 <display7SEG_2+0x358>)
 800053e:	f000 ff2d 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2104      	movs	r1, #4
 8000546:	48c2      	ldr	r0, [pc, #776]	; (8000850 <display7SEG_2+0x358>)
 8000548:	f000 ff28 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	48bf      	ldr	r0, [pc, #764]	; (8000850 <display7SEG_2+0x358>)
 8000552:	f000 ff23 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2110      	movs	r1, #16
 800055a:	48bd      	ldr	r0, [pc, #756]	; (8000850 <display7SEG_2+0x358>)
 800055c:	f000 ff1e 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000566:	48ba      	ldr	r0, [pc, #744]	; (8000850 <display7SEG_2+0x358>)
 8000568:	f000 ff18 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000572:	48b8      	ldr	r0, [pc, #736]	; (8000854 <display7SEG_2+0x35c>)
 8000574:	f000 ff12 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057e:	48b5      	ldr	r0, [pc, #724]	; (8000854 <display7SEG_2+0x35c>)
 8000580:	f000 ff0c 	bl	800139c <HAL_GPIO_WritePin>
              break;
 8000584:	e15f      	b.n	8000846 <display7SEG_2+0x34e>
          case 1:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2102      	movs	r1, #2
 800058a:	48b1      	ldr	r0, [pc, #708]	; (8000850 <display7SEG_2+0x358>)
 800058c:	f000 ff06 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2104      	movs	r1, #4
 8000594:	48ae      	ldr	r0, [pc, #696]	; (8000850 <display7SEG_2+0x358>)
 8000596:	f000 ff01 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	48ac      	ldr	r0, [pc, #688]	; (8000850 <display7SEG_2+0x358>)
 80005a0:	f000 fefc 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	48a9      	ldr	r0, [pc, #676]	; (8000850 <display7SEG_2+0x358>)
 80005aa:	f000 fef7 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b4:	48a6      	ldr	r0, [pc, #664]	; (8000850 <display7SEG_2+0x358>)
 80005b6:	f000 fef1 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	48a4      	ldr	r0, [pc, #656]	; (8000854 <display7SEG_2+0x35c>)
 80005c2:	f000 feeb 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005cc:	48a1      	ldr	r0, [pc, #644]	; (8000854 <display7SEG_2+0x35c>)
 80005ce:	f000 fee5 	bl	800139c <HAL_GPIO_WritePin>
              break;
 80005d2:	e138      	b.n	8000846 <display7SEG_2+0x34e>
          case 2:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2102      	movs	r1, #2
 80005d8:	489d      	ldr	r0, [pc, #628]	; (8000850 <display7SEG_2+0x358>)
 80005da:	f000 fedf 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2104      	movs	r1, #4
 80005e2:	489b      	ldr	r0, [pc, #620]	; (8000850 <display7SEG_2+0x358>)
 80005e4:	f000 feda 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2108      	movs	r1, #8
 80005ec:	4898      	ldr	r0, [pc, #608]	; (8000850 <display7SEG_2+0x358>)
 80005ee:	f000 fed5 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2110      	movs	r1, #16
 80005f6:	4896      	ldr	r0, [pc, #600]	; (8000850 <display7SEG_2+0x358>)
 80005f8:	f000 fed0 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000602:	4893      	ldr	r0, [pc, #588]	; (8000850 <display7SEG_2+0x358>)
 8000604:	f000 feca 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4891      	ldr	r0, [pc, #580]	; (8000854 <display7SEG_2+0x35c>)
 8000610:	f000 fec4 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	488e      	ldr	r0, [pc, #568]	; (8000854 <display7SEG_2+0x35c>)
 800061c:	f000 febe 	bl	800139c <HAL_GPIO_WritePin>
              break;
 8000620:	e111      	b.n	8000846 <display7SEG_2+0x34e>
          case 3:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2102      	movs	r1, #2
 8000626:	488a      	ldr	r0, [pc, #552]	; (8000850 <display7SEG_2+0x358>)
 8000628:	f000 feb8 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2104      	movs	r1, #4
 8000630:	4887      	ldr	r0, [pc, #540]	; (8000850 <display7SEG_2+0x358>)
 8000632:	f000 feb3 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2108      	movs	r1, #8
 800063a:	4885      	ldr	r0, [pc, #532]	; (8000850 <display7SEG_2+0x358>)
 800063c:	f000 feae 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	4882      	ldr	r0, [pc, #520]	; (8000850 <display7SEG_2+0x358>)
 8000646:	f000 fea9 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000650:	487f      	ldr	r0, [pc, #508]	; (8000850 <display7SEG_2+0x358>)
 8000652:	f000 fea3 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065c:	487d      	ldr	r0, [pc, #500]	; (8000854 <display7SEG_2+0x35c>)
 800065e:	f000 fe9d 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	487a      	ldr	r0, [pc, #488]	; (8000854 <display7SEG_2+0x35c>)
 800066a:	f000 fe97 	bl	800139c <HAL_GPIO_WritePin>
              break;
 800066e:	e0ea      	b.n	8000846 <display7SEG_2+0x34e>
          case 4:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2102      	movs	r1, #2
 8000674:	4876      	ldr	r0, [pc, #472]	; (8000850 <display7SEG_2+0x358>)
 8000676:	f000 fe91 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2104      	movs	r1, #4
 800067e:	4874      	ldr	r0, [pc, #464]	; (8000850 <display7SEG_2+0x358>)
 8000680:	f000 fe8c 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2108      	movs	r1, #8
 8000688:	4871      	ldr	r0, [pc, #452]	; (8000850 <display7SEG_2+0x358>)
 800068a:	f000 fe87 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2110      	movs	r1, #16
 8000692:	486f      	ldr	r0, [pc, #444]	; (8000850 <display7SEG_2+0x358>)
 8000694:	f000 fe82 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069e:	486c      	ldr	r0, [pc, #432]	; (8000850 <display7SEG_2+0x358>)
 80006a0:	f000 fe7c 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006aa:	486a      	ldr	r0, [pc, #424]	; (8000854 <display7SEG_2+0x35c>)
 80006ac:	f000 fe76 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4867      	ldr	r0, [pc, #412]	; (8000854 <display7SEG_2+0x35c>)
 80006b8:	f000 fe70 	bl	800139c <HAL_GPIO_WritePin>
              break;
 80006bc:	e0c3      	b.n	8000846 <display7SEG_2+0x34e>
          case 5:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2102      	movs	r1, #2
 80006c2:	4863      	ldr	r0, [pc, #396]	; (8000850 <display7SEG_2+0x358>)
 80006c4:	f000 fe6a 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2104      	movs	r1, #4
 80006cc:	4860      	ldr	r0, [pc, #384]	; (8000850 <display7SEG_2+0x358>)
 80006ce:	f000 fe65 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2108      	movs	r1, #8
 80006d6:	485e      	ldr	r0, [pc, #376]	; (8000850 <display7SEG_2+0x358>)
 80006d8:	f000 fe60 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	485b      	ldr	r0, [pc, #364]	; (8000850 <display7SEG_2+0x358>)
 80006e2:	f000 fe5b 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ec:	4858      	ldr	r0, [pc, #352]	; (8000850 <display7SEG_2+0x358>)
 80006ee:	f000 fe55 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f8:	4856      	ldr	r0, [pc, #344]	; (8000854 <display7SEG_2+0x35c>)
 80006fa:	f000 fe4f 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000704:	4853      	ldr	r0, [pc, #332]	; (8000854 <display7SEG_2+0x35c>)
 8000706:	f000 fe49 	bl	800139c <HAL_GPIO_WritePin>
              break;
 800070a:	e09c      	b.n	8000846 <display7SEG_2+0x34e>
          case 6:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	484f      	ldr	r0, [pc, #316]	; (8000850 <display7SEG_2+0x358>)
 8000712:	f000 fe43 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2104      	movs	r1, #4
 800071a:	484d      	ldr	r0, [pc, #308]	; (8000850 <display7SEG_2+0x358>)
 800071c:	f000 fe3e 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2108      	movs	r1, #8
 8000724:	484a      	ldr	r0, [pc, #296]	; (8000850 <display7SEG_2+0x358>)
 8000726:	f000 fe39 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2110      	movs	r1, #16
 800072e:	4848      	ldr	r0, [pc, #288]	; (8000850 <display7SEG_2+0x358>)
 8000730:	f000 fe34 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	4845      	ldr	r0, [pc, #276]	; (8000850 <display7SEG_2+0x358>)
 800073c:	f000 fe2e 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000746:	4843      	ldr	r0, [pc, #268]	; (8000854 <display7SEG_2+0x35c>)
 8000748:	f000 fe28 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	4840      	ldr	r0, [pc, #256]	; (8000854 <display7SEG_2+0x35c>)
 8000754:	f000 fe22 	bl	800139c <HAL_GPIO_WritePin>
              break;
 8000758:	e075      	b.n	8000846 <display7SEG_2+0x34e>
          case 7:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2102      	movs	r1, #2
 800075e:	483c      	ldr	r0, [pc, #240]	; (8000850 <display7SEG_2+0x358>)
 8000760:	f000 fe1c 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2104      	movs	r1, #4
 8000768:	4839      	ldr	r0, [pc, #228]	; (8000850 <display7SEG_2+0x358>)
 800076a:	f000 fe17 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2108      	movs	r1, #8
 8000772:	4837      	ldr	r0, [pc, #220]	; (8000850 <display7SEG_2+0x358>)
 8000774:	f000 fe12 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	4834      	ldr	r0, [pc, #208]	; (8000850 <display7SEG_2+0x358>)
 800077e:	f000 fe0d 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000788:	4831      	ldr	r0, [pc, #196]	; (8000850 <display7SEG_2+0x358>)
 800078a:	f000 fe07 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	482f      	ldr	r0, [pc, #188]	; (8000854 <display7SEG_2+0x35c>)
 8000796:	f000 fe01 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <display7SEG_2+0x35c>)
 80007a2:	f000 fdfb 	bl	800139c <HAL_GPIO_WritePin>
              break;
 80007a6:	e04e      	b.n	8000846 <display7SEG_2+0x34e>
          case 8:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2102      	movs	r1, #2
 80007ac:	4828      	ldr	r0, [pc, #160]	; (8000850 <display7SEG_2+0x358>)
 80007ae:	f000 fdf5 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2104      	movs	r1, #4
 80007b6:	4826      	ldr	r0, [pc, #152]	; (8000850 <display7SEG_2+0x358>)
 80007b8:	f000 fdf0 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2108      	movs	r1, #8
 80007c0:	4823      	ldr	r0, [pc, #140]	; (8000850 <display7SEG_2+0x358>)
 80007c2:	f000 fdeb 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	4821      	ldr	r0, [pc, #132]	; (8000850 <display7SEG_2+0x358>)
 80007cc:	f000 fde6 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d6:	481e      	ldr	r0, [pc, #120]	; (8000850 <display7SEG_2+0x358>)
 80007d8:	f000 fde0 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e2:	481c      	ldr	r0, [pc, #112]	; (8000854 <display7SEG_2+0x35c>)
 80007e4:	f000 fdda 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ee:	4819      	ldr	r0, [pc, #100]	; (8000854 <display7SEG_2+0x35c>)
 80007f0:	f000 fdd4 	bl	800139c <HAL_GPIO_WritePin>
              break;
 80007f4:	e027      	b.n	8000846 <display7SEG_2+0x34e>
          case 9:
              HAL_GPIO_WritePin(SEG_0_2ND_GPIO_Port, SEG_0_2ND_Pin, RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2102      	movs	r1, #2
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <display7SEG_2+0x358>)
 80007fc:	f000 fdce 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_1_2ND_GPIO_Port, SEG_1_2ND_Pin, RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2104      	movs	r1, #4
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <display7SEG_2+0x358>)
 8000806:	f000 fdc9 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_2_2ND_GPIO_Port, SEG_2_2ND_Pin, RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2108      	movs	r1, #8
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <display7SEG_2+0x358>)
 8000810:	f000 fdc4 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_3_2ND_GPIO_Port, SEG_3_2ND_Pin, RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2110      	movs	r1, #16
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <display7SEG_2+0x358>)
 800081a:	f000 fdbf 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_4_2ND_GPIO_Port, SEG_4_2ND_Pin, SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	480a      	ldr	r0, [pc, #40]	; (8000850 <display7SEG_2+0x358>)
 8000826:	f000 fdb9 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_5_2ND_GPIO_Port, SEG_5_2ND_Pin, RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <display7SEG_2+0x35c>)
 8000832:	f000 fdb3 	bl	800139c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(SEG_6_2ND_GPIO_Port, SEG_6_2ND_Pin, RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <display7SEG_2+0x35c>)
 800083e:	f000 fdad 	bl	800139c <HAL_GPIO_WritePin>
              break;
 8000842:	e000      	b.n	8000846 <display7SEG_2+0x34e>
          default:
              break;
 8000844:	bf00      	nop
      }
  }
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40010800 	.word	0x40010800
 8000854:	40010c00 	.word	0x40010c00

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 fab9 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f999 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f000 f9d3 	bl	8000c10 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  int start = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  int counter_1 = 4;
 800086e:	2304      	movs	r3, #4
 8000870:	623b      	str	r3, [r7, #32]
  int counter_2 = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	61fb      	str	r3, [r7, #28]
  int red_1 = 1, yellow_1 = 0, green_1 = 0;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  int red_2 = 0, yellow_2 = 0, green_2 = 1;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	2301      	movs	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Setup ban đầu
	  if (start == 0){
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <main+0xbc>
		//Đèn đỏ LED_1
		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	48be      	ldr	r0, [pc, #760]	; (8000b94 <main+0x33c>)
 800089a:	f000 fd7f 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED_1_OPPOSITE_GPIO_Port, RED_1_OPPOSITE_Pin, RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2108      	movs	r1, #8
 80008a2:	48bc      	ldr	r0, [pc, #752]	; (8000b94 <main+0x33c>)
 80008a4:	f000 fd7a 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2102      	movs	r1, #2
 80008ac:	48b9      	ldr	r0, [pc, #740]	; (8000b94 <main+0x33c>)
 80008ae:	f000 fd75 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_1_OPPOSITE_GPIO_Port, YELLOW_1_OPPOSITE_Pin, SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2110      	movs	r1, #16
 80008b6:	48b7      	ldr	r0, [pc, #732]	; (8000b94 <main+0x33c>)
 80008b8:	f000 fd70 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2104      	movs	r1, #4
 80008c0:	48b4      	ldr	r0, [pc, #720]	; (8000b94 <main+0x33c>)
 80008c2:	f000 fd6b 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_1_OPPOSITE_GPIO_Port, GREEN_1_OPPOSITE_Pin, SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2120      	movs	r1, #32
 80008ca:	48b2      	ldr	r0, [pc, #712]	; (8000b94 <main+0x33c>)
 80008cc:	f000 fd66 	bl	800139c <HAL_GPIO_WritePin>
		//Đèn xanh LED_2
		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2140      	movs	r1, #64	; 0x40
 80008d4:	48af      	ldr	r0, [pc, #700]	; (8000b94 <main+0x33c>)
 80008d6:	f000 fd61 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED_2_OPPOSITE_GPIO_Port, RED_2_OPPOSITE_Pin, SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	48ac      	ldr	r0, [pc, #688]	; (8000b94 <main+0x33c>)
 80008e2:	f000 fd5b 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	48aa      	ldr	r0, [pc, #680]	; (8000b94 <main+0x33c>)
 80008ec:	f000 fd56 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_2_OPPOSITE_GPIO_Port, YELLOW_2_OPPOSITE_Pin, SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f6:	48a7      	ldr	r0, [pc, #668]	; (8000b94 <main+0x33c>)
 80008f8:	f000 fd50 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000902:	48a4      	ldr	r0, [pc, #656]	; (8000b94 <main+0x33c>)
 8000904:	f000 fd4a 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_2_OPPOSITE_GPIO_Port, GREEN_2_OPPOSITE_Pin, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090e:	48a1      	ldr	r0, [pc, #644]	; (8000b94 <main+0x33c>)
 8000910:	f000 fd44 	bl	800139c <HAL_GPIO_WritePin>
	  }
	  start = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	627b      	str	r3, [r7, #36]	; 0x24

	  //Setup LED_1
	  if (counter_1 < 0 && red_1 == 1 && yellow_1 == 0 && green_1 == 0){
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	2b00      	cmp	r3, #0
 800091c:	da2c      	bge.n	8000978 <main+0x120>
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d129      	bne.n	8000978 <main+0x120>
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d126      	bne.n	8000978 <main+0x120>
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d123      	bne.n	8000978 <main+0x120>
		  green_1 = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
		  red_1 = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	4895      	ldr	r0, [pc, #596]	; (8000b94 <main+0x33c>)
 800093e:	f000 fd2d 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED_1_OPPOSITE_GPIO_Port, RED_1_OPPOSITE_Pin, SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2108      	movs	r1, #8
 8000946:	4893      	ldr	r0, [pc, #588]	; (8000b94 <main+0x33c>)
 8000948:	f000 fd28 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2102      	movs	r1, #2
 8000950:	4890      	ldr	r0, [pc, #576]	; (8000b94 <main+0x33c>)
 8000952:	f000 fd23 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_1_OPPOSITE_GPIO_Port, YELLOW_1_OPPOSITE_Pin, SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2110      	movs	r1, #16
 800095a:	488e      	ldr	r0, [pc, #568]	; (8000b94 <main+0x33c>)
 800095c:	f000 fd1e 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2104      	movs	r1, #4
 8000964:	488b      	ldr	r0, [pc, #556]	; (8000b94 <main+0x33c>)
 8000966:	f000 fd19 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_1_OPPOSITE_GPIO_Port, GREEN_1_OPPOSITE_Pin, RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	4889      	ldr	r0, [pc, #548]	; (8000b94 <main+0x33c>)
 8000970:	f000 fd14 	bl	800139c <HAL_GPIO_WritePin>
		  counter_1 = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
	  }
	  if (counter_1 < 0 && red_1 == 0 && yellow_1 == 0 && green_1 == 1){
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	2b00      	cmp	r3, #0
 800097c:	da2c      	bge.n	80009d8 <main+0x180>
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d129      	bne.n	80009d8 <main+0x180>
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d126      	bne.n	80009d8 <main+0x180>
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d123      	bne.n	80009d8 <main+0x180>
		  green_1 = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
		  yellow_1 = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	487d      	ldr	r0, [pc, #500]	; (8000b94 <main+0x33c>)
 800099e:	f000 fcfd 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED_1_OPPOSITE_GPIO_Port, RED_1_OPPOSITE_Pin, SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2108      	movs	r1, #8
 80009a6:	487b      	ldr	r0, [pc, #492]	; (8000b94 <main+0x33c>)
 80009a8:	f000 fcf8 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2102      	movs	r1, #2
 80009b0:	4878      	ldr	r0, [pc, #480]	; (8000b94 <main+0x33c>)
 80009b2:	f000 fcf3 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_1_OPPOSITE_GPIO_Port, YELLOW_1_OPPOSITE_Pin, RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2110      	movs	r1, #16
 80009ba:	4876      	ldr	r0, [pc, #472]	; (8000b94 <main+0x33c>)
 80009bc:	f000 fcee 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2104      	movs	r1, #4
 80009c4:	4873      	ldr	r0, [pc, #460]	; (8000b94 <main+0x33c>)
 80009c6:	f000 fce9 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_1_OPPOSITE_GPIO_Port, GREEN_1_OPPOSITE_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2120      	movs	r1, #32
 80009ce:	4871      	ldr	r0, [pc, #452]	; (8000b94 <main+0x33c>)
 80009d0:	f000 fce4 	bl	800139c <HAL_GPIO_WritePin>
		  counter_1 = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
	  }
	  if (counter_1 < 0 && red_1 == 0 && yellow_1 == 1 && green_1 == 0){
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	da2c      	bge.n	8000a38 <main+0x1e0>
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d129      	bne.n	8000a38 <main+0x1e0>
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d126      	bne.n	8000a38 <main+0x1e0>
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d123      	bne.n	8000a38 <main+0x1e0>
		  yellow_1 = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
		  red_1 = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2101      	movs	r1, #1
 80009fc:	4865      	ldr	r0, [pc, #404]	; (8000b94 <main+0x33c>)
 80009fe:	f000 fccd 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED_1_OPPOSITE_GPIO_Port, RED_1_OPPOSITE_Pin, RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2108      	movs	r1, #8
 8000a06:	4863      	ldr	r0, [pc, #396]	; (8000b94 <main+0x33c>)
 8000a08:	f000 fcc8 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4860      	ldr	r0, [pc, #384]	; (8000b94 <main+0x33c>)
 8000a12:	f000 fcc3 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_1_OPPOSITE_GPIO_Port, YELLOW_1_OPPOSITE_Pin, SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2110      	movs	r1, #16
 8000a1a:	485e      	ldr	r0, [pc, #376]	; (8000b94 <main+0x33c>)
 8000a1c:	f000 fcbe 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2104      	movs	r1, #4
 8000a24:	485b      	ldr	r0, [pc, #364]	; (8000b94 <main+0x33c>)
 8000a26:	f000 fcb9 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_1_OPPOSITE_GPIO_Port, GREEN_1_OPPOSITE_Pin, SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	4859      	ldr	r0, [pc, #356]	; (8000b94 <main+0x33c>)
 8000a30:	f000 fcb4 	bl	800139c <HAL_GPIO_WritePin>
		  counter_1 = 4;
 8000a34:	2304      	movs	r3, #4
 8000a36:	623b      	str	r3, [r7, #32]
	  }

	  //Setup LED_2
	  if (counter_2 < 0 && red_2 == 1 && yellow_2 == 0 && green_2 == 0){
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da30      	bge.n	8000aa0 <main+0x248>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d12d      	bne.n	8000aa0 <main+0x248>
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d12a      	bne.n	8000aa0 <main+0x248>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d127      	bne.n	8000aa0 <main+0x248>
		  green_2 = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
		  red_2 = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	484d      	ldr	r0, [pc, #308]	; (8000b94 <main+0x33c>)
 8000a5e:	f000 fc9d 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED_2_OPPOSITE_GPIO_Port, RED_2_OPPOSITE_Pin, SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a68:	484a      	ldr	r0, [pc, #296]	; (8000b94 <main+0x33c>)
 8000a6a:	f000 fc97 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	4848      	ldr	r0, [pc, #288]	; (8000b94 <main+0x33c>)
 8000a74:	f000 fc92 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_2_OPPOSITE_GPIO_Port, YELLOW_2_OPPOSITE_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7e:	4845      	ldr	r0, [pc, #276]	; (8000b94 <main+0x33c>)
 8000a80:	f000 fc8c 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8a:	4842      	ldr	r0, [pc, #264]	; (8000b94 <main+0x33c>)
 8000a8c:	f000 fc86 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_2_OPPOSITE_GPIO_Port, GREEN_2_OPPOSITE_Pin, RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a96:	483f      	ldr	r0, [pc, #252]	; (8000b94 <main+0x33c>)
 8000a98:	f000 fc80 	bl	800139c <HAL_GPIO_WritePin>
		  counter_2 = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61fb      	str	r3, [r7, #28]
	  }
	  if (counter_2 < 0 && red_2 == 0 && yellow_2 == 0 && green_2 == 1){
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da30      	bge.n	8000b08 <main+0x2b0>
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d12d      	bne.n	8000b08 <main+0x2b0>
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d12a      	bne.n	8000b08 <main+0x2b0>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d127      	bne.n	8000b08 <main+0x2b0>
		  green_2 = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
		  yellow_2 = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2140      	movs	r1, #64	; 0x40
 8000ac4:	4833      	ldr	r0, [pc, #204]	; (8000b94 <main+0x33c>)
 8000ac6:	f000 fc69 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED_2_OPPOSITE_GPIO_Port, RED_2_OPPOSITE_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	4830      	ldr	r0, [pc, #192]	; (8000b94 <main+0x33c>)
 8000ad2:	f000 fc63 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	482e      	ldr	r0, [pc, #184]	; (8000b94 <main+0x33c>)
 8000adc:	f000 fc5e 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_2_OPPOSITE_GPIO_Port, YELLOW_2_OPPOSITE_Pin, RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae6:	482b      	ldr	r0, [pc, #172]	; (8000b94 <main+0x33c>)
 8000ae8:	f000 fc58 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af2:	4828      	ldr	r0, [pc, #160]	; (8000b94 <main+0x33c>)
 8000af4:	f000 fc52 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_2_OPPOSITE_GPIO_Port, GREEN_2_OPPOSITE_Pin, SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afe:	4825      	ldr	r0, [pc, #148]	; (8000b94 <main+0x33c>)
 8000b00:	f000 fc4c 	bl	800139c <HAL_GPIO_WritePin>
		  counter_2 = 1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
	  }
	  if (counter_2 < 0 && red_2 == 0 && yellow_2 == 1 && green_2 == 0){
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da30      	bge.n	8000b70 <main+0x318>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d12d      	bne.n	8000b70 <main+0x318>
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d12a      	bne.n	8000b70 <main+0x318>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d127      	bne.n	8000b70 <main+0x318>
		  yellow_2 = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
		  red_2 = 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	4819      	ldr	r0, [pc, #100]	; (8000b94 <main+0x33c>)
 8000b2e:	f000 fc35 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED_2_OPPOSITE_GPIO_Port, RED_2_OPPOSITE_Pin, RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b38:	4816      	ldr	r0, [pc, #88]	; (8000b94 <main+0x33c>)
 8000b3a:	f000 fc2f 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <main+0x33c>)
 8000b44:	f000 fc2a 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_2_OPPOSITE_GPIO_Port, YELLOW_2_OPPOSITE_Pin, SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4e:	4811      	ldr	r0, [pc, #68]	; (8000b94 <main+0x33c>)
 8000b50:	f000 fc24 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	480e      	ldr	r0, [pc, #56]	; (8000b94 <main+0x33c>)
 8000b5c:	f000 fc1e 	bl	800139c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_2_OPPOSITE_GPIO_Port, GREEN_2_OPPOSITE_Pin, SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b66:	480b      	ldr	r0, [pc, #44]	; (8000b94 <main+0x33c>)
 8000b68:	f000 fc18 	bl	800139c <HAL_GPIO_WritePin>
		  counter_2 = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	61fb      	str	r3, [r7, #28]
	  }

	  display7SEG_1(counter_1--);
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	1e5a      	subs	r2, r3, #1
 8000b74:	623a      	str	r2, [r7, #32]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fae8 	bl	800014c <display7SEG_1>
	  display7SEG_2(counter_2--);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	61fa      	str	r2, [r7, #28]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fcb8 	bl	80004f8 <display7SEG_2>
	  HAL_Delay(1000);
 8000b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8c:	f000 f984 	bl	8000e98 <HAL_Delay>
	  if (start == 0){
 8000b90:	e67d      	b.n	800088e <main+0x36>
 8000b92:	bf00      	nop
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b090      	sub	sp, #64	; 0x40
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0318 	add.w	r3, r7, #24
 8000ba2:	2228      	movs	r2, #40	; 0x28
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 f810 	bl	8001bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fbfc 	bl	80013cc <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bda:	f000 f86f 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fe68 	bl	80018cc <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c02:	f000 f85b 	bl	8000cbc <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3740      	adds	r7, #64	; 0x40
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_GPIO_Init+0xa0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <MX_GPIO_Init+0xa0>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_GPIO_Init+0xa0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_GPIO_Init+0xa0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <MX_GPIO_Init+0xa0>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_GPIO_Init+0xa0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_2ND_Pin|SEG_1_2ND_Pin|SEG_2_2ND_Pin|SEG_3_2ND_Pin
 8000c54:	2200      	movs	r2, #0
 8000c56:	f64f 711e 	movw	r1, #65310	; 0xff1e
 8000c5a:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0xa4>)
 8000c5c:	f000 fb9e 	bl	800139c <HAL_GPIO_WritePin>
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_4_2ND_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|YELLOW_2_OPPOSITE_Pin
 8000c60:	2200      	movs	r2, #0
 8000c62:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c68:	f000 fb98 	bl	800139c <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|RED_2_OPPOSITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_0_2ND_Pin SEG_1_2ND_Pin SEG_2_2ND_Pin SEG_3_2ND_Pin
                           SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG_4_2ND_Pin */
  GPIO_InitStruct.Pin = SEG_0_2ND_Pin|SEG_1_2ND_Pin|SEG_2_2ND_Pin|SEG_3_2ND_Pin
 8000c6c:	f64f 731e 	movw	r3, #65310	; 0xff1e
 8000c70:	60bb      	str	r3, [r7, #8]
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_4_2ND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <MX_GPIO_Init+0xa4>)
 8000c86:	f000 fa0f 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin YELLOW_2_OPPOSITE_Pin
                           GREEN_2_OPPOSITE_Pin SEG_5_2ND_Pin SEG_6_2ND_Pin RED_1_OPPOSITE_Pin
                           YELLOW_1_OPPOSITE_Pin GREEN_1_OPPOSITE_Pin RED_2_Pin YELLOW_2_Pin
                           GREEN_2_Pin RED_2_OPPOSITE_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|YELLOW_2_OPPOSITE_Pin
 8000c8a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000c8e:	60bb      	str	r3, [r7, #8]
                          |GREEN_2_OPPOSITE_Pin|SEG_5_2ND_Pin|SEG_6_2ND_Pin|RED_1_OPPOSITE_Pin
                          |YELLOW_1_OPPOSITE_Pin|GREEN_1_OPPOSITE_Pin|RED_2_Pin|YELLOW_2_Pin
                          |GREEN_2_Pin|RED_2_OPPOSITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_GPIO_Init+0xa8>)
 8000ca4:	f000 fa00 	bl	80010a8 <HAL_GPIO_Init>

}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	40010c00 	.word	0x40010c00

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x5c>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_MspInit+0x60>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_MspInit+0x60>)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010000 	.word	0x40010000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d72:	f000 f875 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
	...

08000d88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff fff7 	bl	8000d7a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8e:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da4:	4c09      	ldr	r4, [pc, #36]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f000 fee7 	bl	8001b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db6:	f7ff fd4f 	bl	8000858 <main>
  bx lr
 8000dba:	4770      	bx	lr
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc4:	08001c20 	.word	0x08001c20
  ldr r2, =_sbss
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dcc:	2000002c 	.word	0x2000002c

08000dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_2_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x28>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x28>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f92b 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff ff6a 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f935 	bl	800108e <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f90b 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <HAL_IncTick+0x20>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000028 	.word	0x20000028

08000e84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	20000028 	.word	0x20000028

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff fff0 	bl	8000e84 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffe0 	bl	8000e84 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff90 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff49 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff5e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff90 	bl	8000f98 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5f 	bl	8000f44 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffb0 	bl	8000ffc <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b08b      	sub	sp, #44	; 0x2c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ba:	e148      	b.n	800134e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010bc:	2201      	movs	r2, #1
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	f040 8137 	bne.w	8001348 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4aa3      	ldr	r2, [pc, #652]	; (800136c <HAL_GPIO_Init+0x2c4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d05e      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 80010e4:	4aa1      	ldr	r2, [pc, #644]	; (800136c <HAL_GPIO_Init+0x2c4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d875      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 80010ea:	4aa1      	ldr	r2, [pc, #644]	; (8001370 <HAL_GPIO_Init+0x2c8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d058      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 80010f0:	4a9f      	ldr	r2, [pc, #636]	; (8001370 <HAL_GPIO_Init+0x2c8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d86f      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 80010f6:	4a9f      	ldr	r2, [pc, #636]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d052      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 80010fc:	4a9d      	ldr	r2, [pc, #628]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d869      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 8001102:	4a9d      	ldr	r2, [pc, #628]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d04c      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 8001108:	4a9b      	ldr	r2, [pc, #620]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d863      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 800110e:	4a9b      	ldr	r2, [pc, #620]	; (800137c <HAL_GPIO_Init+0x2d4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d046      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 8001114:	4a99      	ldr	r2, [pc, #612]	; (800137c <HAL_GPIO_Init+0x2d4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d85d      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 800111a:	2b12      	cmp	r3, #18
 800111c:	d82a      	bhi.n	8001174 <HAL_GPIO_Init+0xcc>
 800111e:	2b12      	cmp	r3, #18
 8001120:	d859      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <HAL_GPIO_Init+0x80>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	080011a3 	.word	0x080011a3
 800112c:	0800117d 	.word	0x0800117d
 8001130:	0800118f 	.word	0x0800118f
 8001134:	080011d1 	.word	0x080011d1
 8001138:	080011d7 	.word	0x080011d7
 800113c:	080011d7 	.word	0x080011d7
 8001140:	080011d7 	.word	0x080011d7
 8001144:	080011d7 	.word	0x080011d7
 8001148:	080011d7 	.word	0x080011d7
 800114c:	080011d7 	.word	0x080011d7
 8001150:	080011d7 	.word	0x080011d7
 8001154:	080011d7 	.word	0x080011d7
 8001158:	080011d7 	.word	0x080011d7
 800115c:	080011d7 	.word	0x080011d7
 8001160:	080011d7 	.word	0x080011d7
 8001164:	080011d7 	.word	0x080011d7
 8001168:	080011d7 	.word	0x080011d7
 800116c:	08001185 	.word	0x08001185
 8001170:	08001199 	.word	0x08001199
 8001174:	4a82      	ldr	r2, [pc, #520]	; (8001380 <HAL_GPIO_Init+0x2d8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800117a:	e02c      	b.n	80011d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e029      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	3304      	adds	r3, #4
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e024      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	3308      	adds	r3, #8
 8001194:	623b      	str	r3, [r7, #32]
          break;
 8001196:	e01f      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	330c      	adds	r3, #12
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e01a      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011aa:	2304      	movs	r3, #4
 80011ac:	623b      	str	r3, [r7, #32]
          break;
 80011ae:	e013      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b8:	2308      	movs	r3, #8
 80011ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	611a      	str	r2, [r3, #16]
          break;
 80011c2:	e009      	b.n	80011d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c4:	2308      	movs	r3, #8
 80011c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	615a      	str	r2, [r3, #20]
          break;
 80011ce:	e003      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
          break;
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          break;
 80011d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2bff      	cmp	r3, #255	; 0xff
 80011dc:	d801      	bhi.n	80011e2 <HAL_GPIO_Init+0x13a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	e001      	b.n	80011e6 <HAL_GPIO_Init+0x13e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3304      	adds	r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2bff      	cmp	r3, #255	; 0xff
 80011ec:	d802      	bhi.n	80011f4 <HAL_GPIO_Init+0x14c>
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x152>
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	3b08      	subs	r3, #8
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	210f      	movs	r1, #15
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	401a      	ands	r2, r3
 800120c:	6a39      	ldr	r1, [r7, #32]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	431a      	orrs	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8090 	beq.w	8001348 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001228:	4b56      	ldr	r3, [pc, #344]	; (8001384 <HAL_GPIO_Init+0x2dc>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a55      	ldr	r2, [pc, #340]	; (8001384 <HAL_GPIO_Init+0x2dc>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <HAL_GPIO_Init+0x2dc>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001240:	4a51      	ldr	r2, [pc, #324]	; (8001388 <HAL_GPIO_Init+0x2e0>)
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4013      	ands	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a49      	ldr	r2, [pc, #292]	; (800138c <HAL_GPIO_Init+0x2e4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d00d      	beq.n	8001288 <HAL_GPIO_Init+0x1e0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a48      	ldr	r2, [pc, #288]	; (8001390 <HAL_GPIO_Init+0x2e8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d007      	beq.n	8001284 <HAL_GPIO_Init+0x1dc>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a47      	ldr	r2, [pc, #284]	; (8001394 <HAL_GPIO_Init+0x2ec>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_GPIO_Init+0x1d8>
 800127c:	2302      	movs	r3, #2
 800127e:	e004      	b.n	800128a <HAL_GPIO_Init+0x1e2>
 8001280:	2303      	movs	r3, #3
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x1e2>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_GPIO_Init+0x1e2>
 8001288:	2300      	movs	r3, #0
 800128a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128c:	f002 0203 	and.w	r2, r2, #3
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4093      	lsls	r3, r2
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800129a:	493b      	ldr	r1, [pc, #236]	; (8001388 <HAL_GPIO_Init+0x2e0>)
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012b4:	4b38      	ldr	r3, [pc, #224]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	4937      	ldr	r1, [pc, #220]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	608b      	str	r3, [r1, #8]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012c2:	4b35      	ldr	r3, [pc, #212]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4933      	ldr	r1, [pc, #204]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	492d      	ldr	r1, [pc, #180]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	60cb      	str	r3, [r1, #12]
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4929      	ldr	r1, [pc, #164]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4923      	ldr	r1, [pc, #140]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	43db      	mvns	r3, r3
 800131a:	491f      	ldr	r1, [pc, #124]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 800131c:	4013      	ands	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4919      	ldr	r1, [pc, #100]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	43db      	mvns	r3, r3
 8001342:	4915      	ldr	r1, [pc, #84]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 8001344:	4013      	ands	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	3301      	adds	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	f47f aeaf 	bne.w	80010bc <HAL_GPIO_Init+0x14>
  }
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	372c      	adds	r7, #44	; 0x2c
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	10320000 	.word	0x10320000
 8001370:	10310000 	.word	0x10310000
 8001374:	10220000 	.word	0x10220000
 8001378:	10210000 	.word	0x10210000
 800137c:	10120000 	.word	0x10120000
 8001380:	10110000 	.word	0x10110000
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000
 800138c:	40010800 	.word	0x40010800
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40011000 	.word	0x40011000
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e26c      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8087 	beq.w	80014fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ec:	4b92      	ldr	r3, [pc, #584]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d00c      	beq.n	8001412 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f8:	4b8f      	ldr	r3, [pc, #572]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d112      	bne.n	800142a <HAL_RCC_OscConfig+0x5e>
 8001404:	4b8c      	ldr	r3, [pc, #560]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d10b      	bne.n	800142a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001412:	4b89      	ldr	r3, [pc, #548]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d06c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x12c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d168      	bne.n	80014f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e246      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x76>
 8001434:	4b80      	ldr	r3, [pc, #512]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a7f      	ldr	r2, [pc, #508]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800143a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e02e      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x98>
 800144a:	4b7b      	ldr	r3, [pc, #492]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a7a      	ldr	r2, [pc, #488]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b78      	ldr	r3, [pc, #480]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a77      	ldr	r2, [pc, #476]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800145c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e01d      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0xbc>
 800146e:	4b72      	ldr	r3, [pc, #456]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a71      	ldr	r2, [pc, #452]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b6f      	ldr	r3, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6e      	ldr	r2, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001488:	4b6b      	ldr	r3, [pc, #428]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a6a      	ldr	r2, [pc, #424]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b68      	ldr	r3, [pc, #416]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a67      	ldr	r2, [pc, #412]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fcec 	bl	8000e84 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fce8 	bl	8000e84 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1fa      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b5d      	ldr	r3, [pc, #372]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0xe4>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fcd8 	bl	8000e84 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fcd4 	bl	8000e84 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1e6      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	4b53      	ldr	r3, [pc, #332]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x10c>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d063      	beq.n	80015ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001506:	4b4c      	ldr	r3, [pc, #304]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001512:	4b49      	ldr	r3, [pc, #292]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d11c      	bne.n	8001558 <HAL_RCC_OscConfig+0x18c>
 800151e:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d116      	bne.n	8001558 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	4b43      	ldr	r3, [pc, #268]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_RCC_OscConfig+0x176>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e1ba      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001542:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4939      	ldr	r1, [pc, #228]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	e03a      	b.n	80015ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d020      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_RCC_OscConfig+0x270>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fc8d 	bl	8000e84 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff fc89 	bl	8000e84 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e19b      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4927      	ldr	r1, [pc, #156]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_RCC_OscConfig+0x270>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc6c 	bl	8000e84 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc68 	bl	8000e84 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e17a      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03a      	beq.n	8001650 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d019      	beq.n	8001616 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_RCC_OscConfig+0x274>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fc4c 	bl	8000e84 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc48 	bl	8000e84 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e15a      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800160e:	2001      	movs	r0, #1
 8001610:	f000 fa9a 	bl	8001b48 <RCC_Delay>
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_RCC_OscConfig+0x274>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fc32 	bl	8000e84 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001622:	e00f      	b.n	8001644 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fc2e 	bl	8000e84 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d908      	bls.n	8001644 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e140      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	42420000 	.word	0x42420000
 8001640:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	4b9e      	ldr	r3, [pc, #632]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e9      	bne.n	8001624 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a6 	beq.w	80017aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b97      	ldr	r3, [pc, #604]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b94      	ldr	r3, [pc, #592]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a93      	ldr	r2, [pc, #588]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b91      	ldr	r3, [pc, #580]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b8e      	ldr	r3, [pc, #568]	; (80018c4 <HAL_RCC_OscConfig+0x4f8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001696:	4b8b      	ldr	r3, [pc, #556]	; (80018c4 <HAL_RCC_OscConfig+0x4f8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a8a      	ldr	r2, [pc, #552]	; (80018c4 <HAL_RCC_OscConfig+0x4f8>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fbef 	bl	8000e84 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016aa:	f7ff fbeb 	bl	8000e84 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	; 0x64
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0fd      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b81      	ldr	r3, [pc, #516]	; (80018c4 <HAL_RCC_OscConfig+0x4f8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x312>
 80016d0:	4b7b      	ldr	r3, [pc, #492]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a7a      	ldr	r2, [pc, #488]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	e02d      	b.n	800173a <HAL_RCC_OscConfig+0x36e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x334>
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a72      	ldr	r2, [pc, #456]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	e01c      	b.n	800173a <HAL_RCC_OscConfig+0x36e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d10c      	bne.n	8001722 <HAL_RCC_OscConfig+0x356>
 8001708:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a6c      	ldr	r2, [pc, #432]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a69      	ldr	r2, [pc, #420]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	e00b      	b.n	800173a <HAL_RCC_OscConfig+0x36e>
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a66      	ldr	r2, [pc, #408]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a63      	ldr	r2, [pc, #396]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	f023 0304 	bic.w	r3, r3, #4
 8001738:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d015      	beq.n	800176e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fb9f 	bl	8000e84 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fb9b 	bl	8000e84 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0ab      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	4b57      	ldr	r3, [pc, #348]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0ee      	beq.n	800174a <HAL_RCC_OscConfig+0x37e>
 800176c:	e014      	b.n	8001798 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff fb89 	bl	8000e84 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff fb85 	bl	8000e84 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e095      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	4b4c      	ldr	r3, [pc, #304]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ee      	bne.n	8001776 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d105      	bne.n	80017aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179e:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a47      	ldr	r2, [pc, #284]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8081 	beq.w	80018b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b4:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d061      	beq.n	8001884 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d146      	bne.n	8001856 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c8:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_RCC_OscConfig+0x4fc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fb59 	bl	8000e84 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff fb55 	bl	8000e84 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e067      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fc:	d108      	bne.n	8001810 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	492d      	ldr	r1, [pc, #180]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a19      	ldr	r1, [r3, #32]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	430b      	orrs	r3, r1
 8001822:	4927      	ldr	r1, [pc, #156]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x4fc>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fb29 	bl	8000e84 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff fb25 	bl	8000e84 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e037      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x46a>
 8001854:	e02f      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_RCC_OscConfig+0x4fc>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fb12 	bl	8000e84 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff fb0e 	bl	8000e84 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e020      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x498>
 8001882:	e018      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e013      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40007000 	.word	0x40007000
 80018c8:	42420060 	.word	0x42420060

080018cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0d0      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d910      	bls.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4965      	ldr	r1, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800194a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d040      	beq.n	80019ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e073      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4936      	ldr	r1, [pc, #216]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7ff fa62 	bl	8000e84 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff fa5e 	bl	8000e84 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e053      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d210      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f821 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	5ccb      	ldrb	r3, [r1, r3]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1cc>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f9c0 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08001bf4 	.word	0x08001bf4
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d002      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8001ace:	e027      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ad2:	613b      	str	r3, [r7, #16]
      break;
 8001ad4:	e027      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	0c9b      	lsrs	r3, r3, #18
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ae0:	5cd3      	ldrb	r3, [r2, r3]
 8001ae2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0c5b      	lsrs	r3, r3, #17
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b02:	fb02 f203 	mul.w	r2, r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e004      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	613b      	str	r3, [r7, #16]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b22:	613b      	str	r3, [r7, #16]
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	693b      	ldr	r3, [r7, #16]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	007a1200 	.word	0x007a1200
 8001b3c:	08001c04 	.word	0x08001c04
 8001b40:	08001c14 	.word	0x08001c14
 8001b44:	003d0900 	.word	0x003d0900

08001b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <RCC_Delay+0x34>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <RCC_Delay+0x38>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0a5b      	lsrs	r3, r3, #9
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b64:	bf00      	nop
  }
  while (Delay --);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	60fa      	str	r2, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f9      	bne.n	8001b64 <RCC_Delay+0x1c>
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	10624dd3 	.word	0x10624dd3

08001b84 <__libc_init_array>:
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	2600      	movs	r6, #0
 8001b88:	4d0c      	ldr	r5, [pc, #48]	; (8001bbc <__libc_init_array+0x38>)
 8001b8a:	4c0d      	ldr	r4, [pc, #52]	; (8001bc0 <__libc_init_array+0x3c>)
 8001b8c:	1b64      	subs	r4, r4, r5
 8001b8e:	10a4      	asrs	r4, r4, #2
 8001b90:	42a6      	cmp	r6, r4
 8001b92:	d109      	bne.n	8001ba8 <__libc_init_array+0x24>
 8001b94:	f000 f822 	bl	8001bdc <_init>
 8001b98:	2600      	movs	r6, #0
 8001b9a:	4d0a      	ldr	r5, [pc, #40]	; (8001bc4 <__libc_init_array+0x40>)
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	; (8001bc8 <__libc_init_array+0x44>)
 8001b9e:	1b64      	subs	r4, r4, r5
 8001ba0:	10a4      	asrs	r4, r4, #2
 8001ba2:	42a6      	cmp	r6, r4
 8001ba4:	d105      	bne.n	8001bb2 <__libc_init_array+0x2e>
 8001ba6:	bd70      	pop	{r4, r5, r6, pc}
 8001ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bac:	4798      	blx	r3
 8001bae:	3601      	adds	r6, #1
 8001bb0:	e7ee      	b.n	8001b90 <__libc_init_array+0xc>
 8001bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bb6:	4798      	blx	r3
 8001bb8:	3601      	adds	r6, #1
 8001bba:	e7f2      	b.n	8001ba2 <__libc_init_array+0x1e>
 8001bbc:	08001c18 	.word	0x08001c18
 8001bc0:	08001c18 	.word	0x08001c18
 8001bc4:	08001c18 	.word	0x08001c18
 8001bc8:	08001c1c 	.word	0x08001c1c

08001bcc <memset>:
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4402      	add	r2, r0
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d100      	bne.n	8001bd6 <memset+0xa>
 8001bd4:	4770      	bx	lr
 8001bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bda:	e7f9      	b.n	8001bd0 <memset+0x4>

08001bdc <_init>:
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bde:	bf00      	nop
 8001be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be2:	bc08      	pop	{r3}
 8001be4:	469e      	mov	lr, r3
 8001be6:	4770      	bx	lr

08001be8 <_fini>:
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	bf00      	nop
 8001bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bee:	bc08      	pop	{r3}
 8001bf0:	469e      	mov	lr, r3
 8001bf2:	4770      	bx	lr
